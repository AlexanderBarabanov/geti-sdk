from .media_manager import BaseMediaManager
from sc_api_tools.data_models import MediaType, Video, MediaList
from sc_api_tools.rest_converters import MediaRESTConverter


class VideoManager(BaseMediaManager[Video]):
    """
    Class to manage video uploads and downloads for a certain project
    """

    _MEDIA_TYPE = MediaType.VIDEO

    def get_all_videos(self):
        """
        Get the ID's and filenames of all videos in the project

        :return: Dictionary containing the ID's (as keys) and filenames (as values)
            of the videos in the project
        """
        return self._get_all()

    def upload_video(self, filepath_to_video: str) -> Video:
        """
        Upload a video file to the server

        :param filepath_to_video: full path to the video on disk
        :return: String containing the unique ID of the video, generated by Sonoma
            Creek
        """
        video_dict = self._upload(filepath_to_video)
        return MediaRESTConverter.from_dict(
            input_dict=video_dict, media_type=Video
        )

    def upload_folder(
            self, path_to_folder: str, n_videos: int = -1
    ) -> MediaList[Video]:
        """
        Uploads all videos in a folder to the project. Returns the mapping of video
        filename to the unique ID assigned by Sonoma Creek.

        :param path_to_folder: Folder with videos to upload
        :param n_videos: Number of videos to upload from folder
        :return: MediaList containing all video's in the project
        """
        return self._upload_folder(path_to_folder=path_to_folder, n_media=n_videos)

    def download_all(self, path_to_folder: str) -> None:
        """
        Download all videos in a project to a folder on the local disk.

        :param path_to_folder: path to the folder in which the videos should be saved
        """
        self._download_all(path_to_folder)
