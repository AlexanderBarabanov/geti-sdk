name: Security static code scans

on:
  workflow_dispatch:

  schedule: # Execute tests at midnight every day
    - cron: "0 0 * * *"

env:
  SNYK_API: https://snyk.devtools.intel.com/api/v1
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  REPORT_DIRECTORY: reports

jobs:
  security:
    runs-on: self-hosted
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install package with dev requirements
        # Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Create report directory
        # Creates the temporary directory used to store the test reports
        run: mkdir $REPORT_DIRECTORY

      # Snyk setup has been done manually on the self-hosted runner
      # - name: Set up Snyk
      #   uses: snyk/actions/setup@master

      # Snyk-to-html setup has been done manually on the self-hosted runner
      # - name: Install snyk-to-html
      #   run: |
      #     npm install snyk-to-html -g

      - name: Snyk scan
        # Run Snyk scan
        run: |
          export no_proxy=snyk.devtools.intel.com
          snyk auth $SNYK_TOKEN -d
          snyk test --all-projects --json-file-output=$REPORT_DIRECTORY/snyk.json --print-deps
          snyk-to-html -i snyk.json -o snyk.html

      - name: Bandit scan
        # Run Bandit scan
        run: |
          pip install bandit
          bandit -r . --ini tox.ini -f 'txt' -o $REPORT_DIRECTORY/bandit.txt -v

#      - name: Git AV Scan
#        uses: djdefi/gitavscan@main
#        with:
#          full: '--full'

      - name: Upload test reports
        # Publish the test reports to github
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-reports
          path: ${{ env.REPORT_DIRECTORY }}

      - name: Clean up artifact directories
        # Remove temporary report directory
        if: ${{ always() }}
        run: |
          rm -r $REPORT_DIRECTORY
